@model IEnumerable<LMS_mastery.Models.DTOsView.GradebookView>
@{
    ViewBag.Title = "GradeBook";
}

<div ng-app="gradebookModule" ng-controller="gradebookCtrl" class="row">
    <h2>{{gradebook.CourseName}} - Gradebook</h2>
    <div class="Links">
        <div class="btn-group" style="margin: 9px 0 5px;">
            <!--Small button bar that allows teacher to go to different areas in the website-->
            @Html.ActionLink("Class Information", "Edit", "Teacher", new { id = ViewContext.RouteData.Values["id"] }, new { @class = "btn btn-default", @type = "button" })
            @Html.ActionLink("Roster", "Class", "Teacher", new { id = ViewContext.RouteData.Values["id"] }, new { @class = "btn btn-default", @type = "button" })
            @Html.ActionLink("Gradebook", "Gradebook", "Course", new { id = ViewContext.RouteData.Values["id"] }, new { @class = "btn btn-default", @type = "button" })
        </div>
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Grade</th>
                <th ng-repeat="assignment in gradebook.Assignments">{{assignment.Name}}</th>
            </tr>

        </thead>
        <tbody>
            <tr ng-repeat="student in gradebook.Students">
                <td>{{student.LastName}}, {{student.FirstName}}</td>
                <td>{{student.LetterGrade}}</td>
                <td ng-controller="ItemCtrl" ng-repeat="grade in student.Grades" ng-init="grade=grade;">
                    @* Here we have a span with the percent score for this assignment/student.  If they click it, we want to flip the cell to edit mode which
                        will hide the score percent.  Sometimes though, we won't have a percent because the assignment has not been graded yet, so if the
                        ActualPoints is null we will instead show a pencil icon.  Also note we don't have to bind ng-show to a simple bool, we can write javascript
                        expressions as well.  In fact, you can write javascript code in many angular directives if you need to.
                    *@
                    <span ng-click="showForm()" ng-hide="editMode">{{formatGrade(grade.Score)}}<i ng-show="grade.Points == null" class="glyphicon glyphicon-pencil"></i></span>
                    @* If we are in editMode, let's show a textbox with the current ActualPoints.  They can change this value and click the save button.  Notice
                        that save takes no parameters.  Look at the code in ItemCtrl... since we attached the score to the ItemCtrl scope in the ng-Init, we already have
                        the data save() needs.  Handy huh?
                    *@
                    <div ng-show="editMode">
                        <input ng-model="score.Points" />
                        / {{score.PointsPossible}}
                        <button ng-click="save();">
                            Save
                        </button>
                    </div>
                </td>
                @*<td ng-repeat="grade in student.Grades">{{ formatGrade(grade.Score) }}</td>*@
            </tr>
        </tbody>
    </table>
</div>


@section scripts {
    <script src="~/Scripts/jquery-1.10.2.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <script src="~/Scripts/angular.js"></script>
    
    <script>
        var app = angular.module('gradebookModule', []);

        app.factory('gradebookFactory', function ($http) {
            var result = {};
            var url = '/api/gradebook/';
            var classId = '@ViewContext.RouteData.Values["id"]';

            result.getGradebookInfo = function () {
                return $http.get(url + classId);
            };

            return result;
        });
        app.controller('ItemCtrl', function ($scope) {
            // we will use this bool to determine whether to show the percent or the point entry
            // input/button.  We want to toggle this on and off by clicking the cell data
            $scope.editMode = false;

            // when they click the cell, we will attach this function to the ng-click event to 
            // toggle editMode to true
            $scope.showForm = function () {
                $scope.editMode = true;
            }

            // When the user is editing, this function will be attached to the ng-click on the button
            // in the real app we won't log, we'll send the actual points to the server then reload 
            // the student grade data for that row.
            $scope.save = function () {
                console.log('You would save ' + $scope.grade.Points + ' for assignmentId ' + $scope.grade.AssignmentId + ' here');
                $scope.editMode = false;
            }
        });
        app.controller('gradebookCtrl', function ($scope, gradebookFactory) {
            $scope.refreshGradebook = function () {
                gradebookFactory.getGradebookInfo()
                    .success(function (data) {
                        $scope.gradebook = data;
                    })
                    .error(function (message, status) {
                        alert(status + ': ' + message);
                    });
            };

            $scope.formatGrade = function (score) {
                if (score == null)
                    return 'N/A';
                else {
                    return score * 100 + '%';
                }
            };
            $scope.refreshGradebook();
        });
    </script>
}
